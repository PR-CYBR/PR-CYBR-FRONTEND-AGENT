name: Container Security Scan

on:
  pull_request:
    branches:
      - main
  workflow_dispatch:
  workflow_call:
    outputs:
      status:
        description: Overall status of the container scan job
        value: ${{ jobs.container_scan.outputs.status }}
      critical_findings:
        description: Critical findings detected by the container scan
        value: ${{ jobs.container_scan.outputs.critical_findings }}
      total_findings:
        description: Total findings detected by the container scan
        value: ${{ jobs.container_scan.outputs.total_findings }}

permissions:
  contents: read
  pull-requests: write

jobs:
  container_scan:
    name: Run Trivy container scan
    runs-on: ubuntu-latest
    outputs:
      status: ${{ steps.evaluate.outputs.status }}
      critical_findings: ${{ steps.evaluate.outputs.critical }}
      total_findings: ${{ steps.evaluate.outputs.total }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Run Trivy filesystem scan
        id: trivy
        uses: aquasecurity/trivy-action@0.20.0
        continue-on-error: true
        with:
          scan-type: fs
          format: json
          output: trivy-report.json
          severity: CRITICAL,HIGH
          ignore-unfixed: true
          vuln-type: os,library
          security-checks: vuln,config,secret
          exit-code: 0

      - name: Evaluate Trivy results
        id: evaluate
        run: |
          python <<'PY'
          import json
          import os

          path = "trivy-report.json"
          total = 0
          critical = 0

          if os.path.exists(path) and os.path.getsize(path):
              with open(path, "r", encoding="utf-8") as handle:
                  try:
                      data = json.load(handle)
                  except json.JSONDecodeError:
                      data = {}
              if isinstance(data, dict):
                  results = data.get("Results", []) or []
                  for result in results:
                      vulnerabilities = result.get("Vulnerabilities") or []
                      misconfigs = result.get("Misconfigurations") or []
                      total += len(vulnerabilities) + len(misconfigs)
                      critical += sum(1 for item in vulnerabilities if str(item.get("Severity", "")).upper() == "CRITICAL")
                      critical += sum(1 for item in misconfigs if str(item.get("Severity", "")).upper() == "CRITICAL")
          status = "success"
          if critical > 0:
              status = "failure"

          github_output = os.environ["GITHUB_OUTPUT"]
          with open(github_output, "a", encoding="utf-8") as handle:
              handle.write(f"total={total}\n")
              handle.write(f"critical={critical}\n")
              handle.write(f"status={status}\n")
          PY

      - name: Write job summary
        run: |
          {
            echo "### Container Security Scan"
            echo ""
            if [ "${{ steps.evaluate.outputs.status }}" = "success" ]; then
              echo "✅ No critical container vulnerabilities detected."
            else
              echo "❌ Critical container vulnerabilities detected."
            fi
            echo ""
            echo "- Total findings: ${{ steps.evaluate.outputs.total }}"
            echo "- Critical findings: ${{ steps.evaluate.outputs.critical }}"
          } >> "$GITHUB_STEP_SUMMARY"

      - name: Comment on PR with summary
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        env:
          STATUS: ${{ steps.evaluate.outputs.status }}
          TOTAL: ${{ steps.evaluate.outputs.total }}
          CRITICAL: ${{ steps.evaluate.outputs.critical }}
        with:
          script: |
            const marker = '<!-- container-scan-report -->';
            const status = process.env.STATUS;
            const total = process.env.TOTAL;
            const critical = process.env.CRITICAL;
            const statusLine = status === 'success'
              ? '✅ No critical container vulnerabilities detected.'
              : '❌ Critical container vulnerabilities detected.';
            const bodyLines = [
              marker,
              '### Container Security Scan Report',
              statusLine,
              `- Total findings: ${total}`,
              `- Critical findings: ${critical}`,
              '',
              'Inspect the workflow run artifacts for the detailed Trivy report.'
            ];
            const body = bodyLines.join('\n');

            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              per_page: 100,
            });

            const existing = comments.find(comment => comment.body && comment.body.includes(marker));
            if (existing) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: existing.id,
                body,
              });
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body,
              });
            }

      - name: Fail on execution errors
        if: steps.trivy.outcome == 'failure' && steps.evaluate.outputs.status == 'success'
        run: |
          echo "Trivy execution failed."
          exit 1

      - name: Enforce failure on critical findings
        if: steps.evaluate.outputs.status == 'failure'
        run: |
          echo "Critical container vulnerabilities were detected."
          exit 1
